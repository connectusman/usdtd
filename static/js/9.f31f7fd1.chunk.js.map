{"version":3,"sources":["views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx","views/Nft/market/Collection/Activity/index.tsx","views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx"],"names":["AvatarImage","styled","div","attrs","alt","src","borderColor","SearchBar","props","history","useHistory","onAddressClick","value","push","nftsBaseUrl","MarketPageTitle","title","description","children","gridGap","alignItems","gridTemplateColumns","as","scale","color","mb","NoNftsImage","BaseSubMenu","SubMenuItems","theme","colors","cardBorder","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","position","pb","BannerImage","bottom","left","PageButtons","Arrow","primary","Avatar","img","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","width","height","mr","ProfileAvatarFetchStatus","FETCHED","image","thumbnail","to","display","lineHeight","truncateHash","BackLink","RouterLink","TopBar","t","useTranslation","justifyContent","LowestPriceStatBoxItem","collectionAddress","useState","lowestPrice","setLowestPrice","useEffect","a","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","StatBox","symbol","stat","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","MarketPageHeader","large","name","formatNumber","Number","address","Container","items","activeItem","mt","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","SELL","RoundedImage","Image","radii","default","MobileModal","activity","bnbBusdPrice","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","useTheme","priceAsFloat","price","priceInUsd","multiplyPriceByAmount","headerBackground","gradients","cardHeader","maxWidth","fontSize","textAlign","collectionName","bold","p","otherParty","seller","buyer","pt","Link","external","getBscScanLink","tx","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","toLowerCase","pancakeBunniesAddress","tokenId","attributes","find","attribute","traitType","onClick","event","stopPropagation","sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","orderType","AskOrderType","getAskOrderEvent","askPrice","id","transactionHistory","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ClearAllButton","dispatch","useAppDispatch","variant","removeAllActivityFilters","TriggerButton","Button","hasItem","CloseButton","IconButton","eventName","eventType","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","addActivityTypeFilters","field","removeActivityTypeFilters","ScrollableFlexContainer","ActivityFilters","textTransform","isEmpty","ActivityHistory","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","useLastUpdated","lastUpdated","refresh","setLastUpdated","useBNBBusdPrice","nftActivityFiltersString","JSON","stringify","fetchCollectionActivity","nftActivityFiltersParsed","parse","getCollectionActivity","collectionActivity","Math","ceil","console","error","isAddress","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","nfts","slice","py","px","style","gap","padding","disabled","nftMeta","metaNft","borderTop","prevState","page","Activity","useGetCollection","StatBoxItem","mx","fontWeight","invertedContrast","card","ResultStatus","SubMenu","input","inputSecondary","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","state","setState","hasResults","FOUND","NOT_FOUND","validAddressHandler","placeholder","subject","onChange","evt","newValue","target","zIndex","paddingRight","top","right","background","isDark"],"mappings":"0IAQMA,E,KAAcC,EAAOC,IAAIC,OAAwB,kBAAc,CACnEC,IADqD,EAAGA,OAAtCH,CAAH,yQAGI,qBAAGI,OAOR,qBAAGC,aAAiC,aAOrCN,O,qFCVAO,IAVa,SAACC,GAC3B,IAAMC,EAAUC,cAMhB,OAAO,cAAC,IAAD,aAAoBC,eAJA,SAACC,GAC1BH,EAAQI,KAAR,UAAgBC,IAAhB,oBAAuCF,MAG0BJ,M,+GCQtDO,IAZyC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAaV,EAApC,wBACtD,eAAC,KAAD,yBAAMW,QAAQ,OAAOC,WAAW,SAASC,oBAAqB,CAAC,MAAO,KAAM,KAAM,KAAM,mBAAuBb,GAA/G,cACE,eAAC,IAAD,WACE,cAAC,KAAD,CAASc,GAAG,KAAKC,MAAM,KAAKC,MAAM,YAAYC,GAAG,OAAjD,SACGT,IAEFC,KAEH,cAAC,IAAD,UAAMC,U,+CCdJQ,E,KAAczB,EAAOC,IAAV,0QAcFwB,O,6DCbTC,EAAc1B,YAAO2B,KAAP3B,CAAH,+FAEM,qBAAG4B,MAAkBC,OAAOC,cAGpCJ,O,4ECqBAK,E,KAtBW/B,EAAOC,IAAIC,OAA8B,kBAAc,CAC/EC,IADiE,EAAGA,OAA5CH,CAAH,kTAGnB,gBAAGI,EAAH,EAAGA,IAAKwB,EAAR,EAAQA,MAAR,OAAqBxB,EAAG,iCAA6BA,EAA7B,kCAA4DwB,EAAMC,OAAOC,eAC1E,qBAAG1B,OAS1B,qBAAGwB,MAAkBI,aAAaC,MAIlC,qBAAGL,MAAkBI,aAAaE,M,yDCEvBC,IAhBmC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,YAAaC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,OAAQrB,EAAyB,EAAzBA,SAAaV,EAAY,iBAC5G,OACE,cAAC,KAAD,yBAAMgC,cAAc,SAASf,GAAG,QAAWjB,GAA3C,aACE,eAAC,IAAD,CAAKiC,SAAS,WAAWC,GAAG,OAA5B,UACE,cAACC,EAAD,CAAatC,IAAKgC,EAAajC,IAAKkC,IACpC,cAAC,IAAD,CAAKG,SAAS,WAAWG,OAAQ,EAAGC,MAAO,EAA3C,SACE,eAAC,KAAD,CAAMzB,WAAW,WAAjB,UACGmB,EACArB,e,4HChBA4B,EAAc7C,IAAOC,IAAV,+JASX6C,EAAQ9C,IAAOC,IAAV,sGACP,qBAAG2B,MAAkBC,OAAOkB,Y,yHCHjCC,EAAShD,IAAOiD,IAAV,mJAMR,qBAAGrB,MAAkBI,aAAaE,MAKhCgB,EAAalD,YAAOmD,KAAPnD,CAAH,iIAuCDoD,IA9B2C,SAAC,GAAwB,IAKrB,EACxB,EANuBC,EAAqB,EAArBA,eAC3D,EAA8EC,YAAoBD,GAA1FE,EAAR,EAAQA,SAAeC,EAAvB,EAAkBC,IAAiBC,EAAnC,EAAmCA,oBAAqBC,EAAxD,EAAwDA,kBAClDC,EAAcL,GAAY,IAE5BM,EAA4B,cAAC,KAAD,CAAUC,MAAM,OAAOC,OAAO,OAAOC,GAAI,CAAC,MAAO,KAAM,UACnFL,IAAsBM,IAAyBC,UAE/CL,GADF,OAAIL,QAAJ,IAAIA,GAAJ,UAAIA,EAAYW,aAAhB,aAAI,EAAmBC,WACO,cAACpB,EAAD,CAAQ5C,IAAG,OAAEoD,QAAF,IAAEA,GAAF,UAAEA,EAAYW,aAAd,aAAE,EAAmBC,YAEhC,cAAC,IAAD,CAAsBN,MAAM,OAAOC,OAAO,OAAOC,GAAI,CAAC,MAAO,KAAM,WAInG,OACE,cAAC,IAAD,CAAMK,GAAE,UAAKxD,IAAL,oBAA4BwC,GAApC,SACE,eAACH,EAAD,WACGW,EACD,eAAC,IAAD,CAAKS,QAAQ,SAAb,UACE,cAAC,KAAD,CAAMC,WAAW,OAAjB,SAAyBC,YAAanB,KACrCK,IAAwBO,IAAyBC,QAChD,cAAC,KAAD,IAEA,cAAC,KAAD,CAAMK,WAAW,OAAjB,SAAyBX,c,kMC3C/Ba,EAAWzE,YAAO0E,IAAP1E,CAAH,iHAEH,qBAAG4B,MAAkBC,OAAOkB,WAqBxB4B,EAhBU,WACvB,IAAQC,EAAMC,cAAND,EAER,OACE,eAAC,KAAD,CAAMzD,WAAW,SAAS2D,eAAe,gBAAgBtD,GAAG,OAA5D,UACE,eAACiD,EAAD,CAAUJ,GAAE,UAAKxD,IAAL,gBAAZ,UACE,cAAC,IAAD,CAAiBU,MAAM,UAAUuC,MAAM,SACtCc,EAAE,sBAEL,cAAC,IAAD,UACE,cAACtE,EAAA,EAAD,U,8ECQOyE,EAxBuD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,kBAAsBzE,EAAY,iBACzG,EAAsC0E,mBAAiB,MAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACQP,EAAMC,cAAND,EAERQ,qBAAU,YACc,uCAAG,4BAAAC,EAAA,sEACaC,YAA2BN,GADxC,OACjBO,EADiB,OAEvBJ,EAAeI,GAFQ,2CAAH,qDAKtBC,KACC,CAACR,EAAmBG,IAEvB,IAAMM,EACY,OAAhBP,EACI,KACAA,EAAYQ,oBAAeC,EAAW,CACpCC,sBAAuB,EACvBC,sBAAuB,IAG/B,OAAO,cAACC,EAAA,EAAD,aAAa/E,MAAO6D,EAAE,oBAAqB,CAAEmB,OAAQ,QAAUC,KAAMP,GAA0BlF,KC8CzF0F,IAvDuB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC/BlB,EAAsBmB,cAAtBnB,kBACAoB,EAAoEF,EAApEE,YAAaC,EAAuDH,EAAvDG,mBAAoBC,EAAmCJ,EAAnCI,eAAgBC,EAAmBL,EAAnBK,OAAQjE,EAAW4D,EAAX5D,OACzDsC,EAAMC,cAAND,EACR,EAA2B4B,cAAnBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAEZC,EAASL,EACXM,WAAWN,GAAgBZ,oBAAeC,EAAW,CACnDC,sBAAuB,EACvBC,sBAAuB,IAEzB,IAEEgB,EAAc,CAClB,CACEC,MAAOlC,EAAE,SACTmC,KAAK,GAAD,OAAKlG,IAAL,wBAAgCmE,EAAhC,WAEN,CACE8B,MAAOlC,EAAE,UACTmC,KAAK,GAAD,OAAKlG,IAAL,wBAAgCmE,EAAhC,YAEN,CACE8B,MAAOlC,EAAE,YACTmC,KAAK,GAAD,OAAKlG,IAAL,wBAAgCmE,EAAhC,eAIR,OACE,qCACE,eAACgC,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAAC7E,EAAA,EAAD,CAAcC,YAAamE,EAAOU,MAAO3E,OAAQ,cAACvC,EAAA,EAAD,CAAaK,IAAKkC,MACnE,cAACxB,EAAA,EAAD,CACEC,MAAOmF,EAAWgB,KAClBlG,YAAakF,EAAWlF,YAAc,cAAC,KAAD,CAAMO,MAAM,aAAZ,SAA0BqD,EAAEsB,EAAWlF,eAAuB,KAFtG,SAIE,eAAC8E,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAa/E,MAAO6D,EAAE,SAAUoB,KAAMmB,YAAaC,OAAOhB,GAAc,EAAG,KAC3E,cAACN,EAAA,EAAD,CACE/E,MAAO6D,EAAE,gBACToB,KAAMK,EAAqBc,YAAaC,OAAOf,GAAqB,EAAG,GAAK,MAE9E,cAAC,EAAD,CAAwBrB,kBAAmBkB,EAAWmB,UACtD,cAACvB,EAAA,EAAD,CAAa/E,MAAO6D,EAAE,kBAAmB,CAAEmB,OAAQ,QAAUC,KAAMW,YAIzE,cAACW,EAAA,EAAD,UACE,cAAC5F,EAAA,EAAD,CAAa6F,MAAOV,EAAaW,WAAU,UAAKf,GAAL,OAAgBC,GAAQ,UAAYe,GAAG,OAAOjG,GAAG,e,2EClE9FkG,EAAW1H,YAAOmD,KAAPnD,CAAH,oDAIR2H,EAAuB,WAC3B,MAAuBC,eAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAEd,OACE,+BACE,cAAC,KAAD,UACE,cAACJ,EAAD,UACE,cAAC,KAAD,CAAU3D,OAAQ,CAAC,IAAK,KAAM,IAAKD,MAAO,CAAC,GAAI,KAAM,WAGzD,cAAC,KAAD,UACE,cAAC4D,EAAD,CAAU5C,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUf,OAAQ,CAAC,GAAI,KAAM,IAAKD,MAAO,SAG5C+D,GAAQC,EAAO,KACd,qCACE,cAAC,KAAD,UACE,cAACJ,EAAD,CAAU5C,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUf,OAAQ,GAAID,MAAO,SAGjC,cAAC,KAAD,UACE,cAAC4D,EAAD,CAAU5C,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUf,OAAQ,GAAID,MAAO,aAKrC,cAAC,KAAD,UACE,cAAC4D,EAAD,CAAU5C,eAAe,SAAzB,SACE,cAAC,KAAD,CAAUf,OAAQ,CAAC,GAAI,KAAM,IAAKD,MAAO,CAAC,GAAI,KAAM,eAoB/CiE,IAbe,kBAC5B,qCACE,cAACJ,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,S,oNCbWK,EAjC6C,SAAC,GAA+B,IAAD,EAA5BC,EAA4B,EAA5BA,YAAgB1H,EAAY,iBACjFqE,EAAMC,cAAND,EAEFsD,GAAM,mBACTC,IAAYC,IAAM,CACjBC,KAAMzD,EAAE,UACRrD,MAAO,eAHC,cAKT4G,IAAYG,OAAS,CACpBD,KAAMzD,EAAE,YACRrD,MAAO,eAPC,cAST4G,IAAYI,OAAS,CACpBF,KAAMzD,EAAE,YACRrD,MAAO,eAXC,cAaT4G,IAAYK,IAAM,CACjBH,KAAMzD,EAAE,UACRrD,MAAO,YAfC,cAiBT4G,IAAYM,KAAO,CAClBJ,KAAMzD,EAAE,QACRrD,MAAO,YAnBC,GAuBZ,OACE,cAAC,KAAD,2BAAUhB,GAAV,IAAiBgB,MAAO2G,EAAOD,GAAa1G,MAA5C,SACG2G,EAAOD,GAAaI,SCvBrBK,EAAe1I,YAAO2I,KAAP3I,CAAH,uEAEG,qBAAG4B,MAAkBgH,MAAMC,WAkGjCC,EAtFiC,SAAC,GAO1C,IANLrF,EAMI,EANJA,IACAsF,EAKI,EALJA,SACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,UAEI,IADJC,sBACI,SACIC,EAAYC,cAAZD,QACAxE,EAAMC,cAAND,EACAhD,EAAU0H,cAAV1H,MACF2H,EAAe3C,WAAWmC,EAASS,OACnCC,EAAaC,YAAsBV,EAAcO,GAEvD,OACE,cAAC,KAAD,CAAOxI,MAAO6D,EAAE,uBAAwBsE,UAAWA,EAAWS,iBAAkB/H,EAAMC,OAAO+H,UAAUC,WAAvG,SACE,eAAC,KAAD,CAAMtH,cAAc,SAASuH,SAAS,QAAtC,UACE,eAAC,KAAD,CAAM3I,WAAW,SAASK,GAAG,OAAOsD,eAAe,gBAAnD,UACE,cAAC4D,EAAD,CAActI,IAAKqD,EAAIU,MAAMC,UAAWL,OAAQ,GAAID,MAAO,GAAIE,GAAG,SAClE,eAAC,KAAD,CAAMzB,cAAc,SAApB,UACE,cAAC,KAAD,CAAMwH,SAAS,OAAOxI,MAAM,aAAayI,UAAU,QAAnD,SACGvG,EAAIwG,iBAEP,cAAC,KAAD,CAAMC,MAAI,EAAV,SAAYzG,EAAIyD,aAGpB,eAAC,IAAD,CAAeiD,EAAE,OAAjB,UACE,eAAC,KAAD,CAAM3I,GAAG,OAAOsD,eAAe,gBAA/B,UACE,cAAC,EAAD,CAAmBiF,SAAS,OAAO9B,YAAac,EAASd,cACxDsB,EACC,eAAC,KAAD,CAAMzE,eAAe,WAAW3D,WAAW,SAA3C,UACE,cAAC,IAAD,CAAa2C,MAAM,OAAOC,OAAO,OAAOC,GAAG,QAC3C,cAAC,KAAD,CAAMA,GAAG,MAAMkG,MAAI,EAAnB,SACGX,IAEH,cAAC,KAAD,CAAMhI,MAAM,aAAZ,sBACSkI,EAAW/D,oBAAeC,EAAW,CAC1CC,sBAAuB,EACvBC,sBAAuB,IAH3B,UAQF,OAGHsD,EACC,eAAC,KAAD,CAAM3H,GAAG,OAAOsD,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMiF,SAAS,OAAOxI,MAAM,aAA5B,SACGqD,EAAE,aAEL,cAAC,KAAD,UAAOmE,EAASqB,WAAa5F,YAAauE,EAASqB,YAAc,SAGnE,qCACE,eAAC,KAAD,CAAM5I,GAAG,OAAOsD,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMiF,SAAS,OAAOxI,MAAM,aAA5B,SACGqD,EAAE,UAEL,cAAC,KAAD,UAAOmE,EAASsB,OAAS7F,YAAauE,EAASsB,QAAU,SAE3D,eAAC,KAAD,CAAM7I,GAAG,OAAOsD,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMiF,SAAS,OAAOxI,MAAM,aAA5B,SACGqD,EAAE,QAEL,cAAC,KAAD,UAAOmE,EAASuB,MAAQ9F,YAAauE,EAASuB,OAAS,YAI7D,eAAC,KAAD,CAAMxF,eAAe,gBAArB,UACE,cAAC,KAAD,CAAMiF,SAAS,OAAOxI,MAAM,aAA5B,SACGqD,EAAE,UAEL,cAAC,KAAD,UAAOqE,UAGX,cAAC,KAAD,CAAM1G,cAAc,SAASgI,GAAG,OAAOpJ,WAAW,SAAlD,SACE,cAAC,IAAD,CAAQE,GAAImJ,KAAMC,UAAQ,EAAC1D,KAAM2D,YAAe3B,EAAS4B,GAAI,cAAevB,GAA5E,SACGxE,EAAE,6BCpEAgG,EAlCO,SAAC,GAA6B,IAA3B5B,EAA0B,EAA1BA,aAAcQ,EAAY,EAAZA,MAC/BC,EAAaC,YAAsBV,EAAcQ,GAEvD,OACE,cAAC,KAAD,CAAMjH,cAAc,SAASpB,WAAW,WAAxC,SACGqI,EACC,qCACE,eAAC,KAAD,CAAMqB,YAAY,aAAa1J,WAAW,SAA1C,UACE,cAAC,IAAD,CAAa2C,MAAM,OAAOC,OAAO,OAAOC,GAAG,QAC3C,cAAC,KAAD,CAAM8F,SAAS,OAAOI,MAAI,EAA1B,SACGV,EAAM9D,oBAAeC,EAAW,CAC/BC,sBAAuB,EACvBC,sBAAuB,SAI5B4D,EACC,cAAC,KAAD,CAAMM,SAAS,OAAOxI,MAAM,aAA5B,sBACSkI,EAAW/D,oBAAeC,EAAW,CAC1CC,sBAAuB,EACvBC,sBAAuB,IAH3B,OAOA,cAAC,KAAD,CAAU9B,OAAO,OAAOD,MAAM,YAIlC,O,SClBF4E,EAAe1I,YAAO2I,KAAP3I,CAAH,uEAEG,qBAAG4B,MAAkBgH,MAAMC,WAkIjCiC,IAtHiC,SAAC,GAM1C,IAAD,EALJ/B,EAKI,EALJA,SACAC,EAII,EAJJA,aACAvF,EAGI,EAHJA,IAGI,IAFJ0F,sBAEI,aADJ4B,qBACI,SACI3B,EAAYC,cAAZD,QACR,EAAuBxB,eAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACRyB,EAAe3C,WAAWmC,EAASS,OACnCwB,EAAiD,IAAjCpE,WAAWmC,EAASkC,WACpChC,EAAkB,IAAIiC,KAAKF,GAAetF,oBAAeC,EAAW,CACxEwF,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YAEV,EAA+BC,aAC7B,cAAC,EAAD,CACE/H,IAAKA,EACLsF,SAAUA,EACVE,gBAAiBA,EACjBD,aAAcA,EACdG,eAAgBA,KANbsC,EAAP,oBASMC,IAAiBjI,GAAMA,EAAIuB,kBAAkB2G,gBAAkBC,IAAsBD,cACrFE,EACJpI,GAAOiI,EAAP,UACIjI,EAAIqI,WAAWC,MAAK,SAACC,GAAD,MAAuC,YAAxBA,EAAUC,oBADjD,aACI,EAAuEtL,MACvE8C,EACAA,EAAIoI,QACJ,KAEN,OACE,gDAAUhE,GAAQC,IAAS,CAAEoE,QAAST,IAAtC,cACIV,EA6BE,KA5BF,cAAC,KAAD,4BACQlD,GAAQC,IAAS,CACrBoE,QAAS,SAACC,GACRA,EAAMC,qBAHZ,aAOE,cAAC,IAAD,CAAY/H,GAAIZ,EAAG,UAAM5C,IAAN,wBAAiC4C,EAAIuB,kBAArC,YAA0D6G,GAA1D,GAAnB,SACE,eAAC,KAAD,CAAM/G,eAAe,aAAa3D,WAAW,SAASoB,cAAe,CAAC,SAAU,KAAM,OAAtF,UACE,cAAC,EAAD,CACEnC,IAAG,OAAEqD,QAAF,IAAEA,OAAF,EAAEA,EAAKU,MAAMC,UAChBjE,IAAG,OAAEsD,QAAF,IAAEA,OAAF,EAAEA,EAAKyD,KACVpD,MAAO,GACPC,OAAQ,GACRC,GAAI,CAAC,EAAG,KAAM,QACdxC,GAAI,CAAC,MAAO,KAAM,KAEpB,eAAC,KAAD,CAAMe,cAAc,SAApB,UACE,cAAC,KAAD,CAAMyH,UAAW,CAAC,SAAU,KAAM,QAASzI,MAAM,aAAawI,SAAS,OAAvE,gBACGtG,QADH,IACGA,OADH,EACGA,EAAKwG,iBAER,cAAC,KAAD,CAAMD,UAAW,CAAC,SAAU,KAAM,QAASE,MAAI,EAA/C,gBACGzG,QADH,IACGA,OADH,EACGA,EAAKyD,kBAOlB,eAAC,KAAD,WACE,cAAC,KAAD,CAAM/F,WAAW,SAAS2D,eAAe,WAAzC,SACE,cAAC,EAAD,CAAmBmD,YAAac,EAASd,gBAE1CJ,GAAQC,EAAO,cAAC,EAAD,CAAe0B,MAAOD,EAAcP,aAAcA,IAAmB,QAEtFnB,GAAQC,EAAO,KACd,qCACE,cAAC,KAAD,UACE,cAAC,EAAD,CAAe0B,MAAOD,EAAcP,aAAcA,MAEnDG,EACC,cAAC,KAAD,UACE,cAAC,KAAD,CAAMrE,eAAe,SAAS3D,WAAW,SAAzC,SACG4H,EAASqB,WAAa,cAAChH,EAAA,EAAD,CAAaC,eAAgB0F,EAASqB,aAAiB,QAIlF,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAMtF,eAAe,SAAS3D,WAAW,SAAzC,SACG4H,EAASsB,OAAS,cAACjH,EAAA,EAAD,CAAaC,eAAgB0F,EAASsB,SAAa,QAG1E,cAAC,KAAD,UACE,cAAC,KAAD,CAAMvF,eAAe,SAAS3D,WAAW,SAAzC,SACG4H,EAASuB,MAAQ,cAAClH,EAAA,EAAD,CAAaC,eAAgB0F,EAASuB,QAAY,cAOhF,cAAC,KAAD,UACE,cAAC,KAAD,CAAMxF,eAAe,SAArB,SACE,cAAC,KAAD,CAAMkF,UAAU,SAASD,SAAUlC,GAAQC,EAAO,OAAS,OAA3D,SACGmB,QAINpB,GAAQC,EAAO,KACd,cAAC,KAAD,UACE,cAAC,KAAD,CAAYzG,GAAImJ,KAAMC,UAAQ,EAAC1D,KAAM2D,YAAe3B,EAAS4B,GAAI,cAAevB,GAAhF,SACE,cAAC,KAAD,CAAa7H,MAAM,aAAauC,MAAM,mB,gGCvIrCuI,EAAe,SAAC,GAMV,IAAD,IALhBC,iBAKgB,MALJ,GAKI,MAJhBC,oBAIgB,MAJD,GAIC,EAyCVC,EAAW,sBAA0BF,EAZKG,KAAI,SAACC,GAMjD,MAAO,CAAEzE,YAlCY,SAAC0E,GACxB,OAAQA,GACN,KAAKC,IAAatE,OAChB,OAAOH,IAAYG,OACrB,KAAKsE,IAAarE,OAChB,OAAOJ,IAAYI,OACrB,KAAKqE,IAAaxE,IAChB,OAAOD,IAAYC,IACrB,QACE,OAAOD,IAAYI,QAoBDsE,CAAiBH,EAAgBC,WAK/BnD,MAJRkD,EAAgBI,SAID7B,UAHFyB,EAAnBzB,UAGgCxH,IAHbiJ,EAARjJ,IAG0BkH,GAFlC+B,EAAgBK,GAEsB1C,OADrC,OAAGqC,QAAH,IAAGA,OAAH,EAAGA,EAAiBrC,OAAO0C,QAO1B,YAA+DR,EA1B1BE,KAAI,SAACO,GACvD,IAAM/E,EAAcE,IAAYM,KACxBwC,EAAmB+B,EAAnB/B,UAAWxH,EAAQuJ,EAARvJ,IAKnB,MAAO,CAAEwE,cAAauB,MAJRwD,EAAmBF,SAIJ7B,YAAWxH,MAAKkH,GAHlCqC,EAAmBD,GAGmBzC,MAFnC0C,EAAmB1C,MAAMyC,GAEiB1C,OADzC2C,EAAmB3C,OAAO0C,SAqB7C,OAAIP,EAAYS,OAAS,EACIT,EAAYU,MAAK,SAACC,EAAeC,GAC1D,IAAMC,EAAaC,IAAOC,UAAUC,KAAKL,EAAclC,WAEvD,OADmBqC,IAAOC,UAAUC,KAAKJ,EAAcnC,WACrCwC,IAAIJ,GAAYK,cAK/B,K,uUCnCMC,EAfuC,SAAC,GAAqC,IAAnC3I,EAAkC,EAAlCA,kBAAsBzE,EAAY,iBACnFqN,EAAWC,cACTjJ,EAAMC,cAAND,EAMR,OACE,cAAC,IAAD,yBAAwBkJ,QAAQ,OAAOxM,MAAM,KAAK4K,QALnC,WACf0B,EAASG,YAAyB/I,MAIuCzE,GAAzE,aACGqE,EAAE,WADO,cCJVoJ,EAAgBhO,YAAOiO,IAAPjO,CAAH,mCACf,qBAAGkO,SACI,0GAQLC,EAAcnO,YAAOoO,KAAPpO,CAAH,2FAKXqO,EAAY,SAACzJ,EAAoB0J,GACrC,OAAQA,GACN,KAAKnG,IAAYG,OACf,OAAO1D,EAAE,YACX,KAAKuD,IAAYI,OACf,OAAO3D,EAAE,YACX,KAAKuD,IAAYC,IACf,OAAOxD,EAAE,UACX,KAAKuD,IAAYM,KACf,OAAO7D,EAAE,QACX,QACE,MAAO,KAIA2J,EAAgD,SAAC,GAAsC,IAApCD,EAAmC,EAAnCA,UAAWtJ,EAAwB,EAAxBA,kBACnEwJ,EAAqBC,YAAyBzJ,GAC9C4I,EAAWC,cACTjJ,EAAMC,cAAND,EAEF8J,EAAkBF,EAAmBG,YAAYC,MAAK,SAACC,GAAD,OAAuBA,IAAsBP,KAYzG,OACE,eAAC,KAAD,CAAMnN,WAAW,SAAS6C,GAAG,MAAMxC,GAAG,MAAtC,UACE,cAAC,IAAD,UACE,cAACwM,EAAD,CACE9B,QAdgB,WACjBwC,GACHd,EAASkB,YAAuB,CAAE5I,WAAYlB,EAAmB+J,MAAOT,MAapER,QAASY,EAAkB,SAAW,QACtCpN,MAAM,KACN4M,QAASQ,EAJX,SAMGL,EAAUzJ,EAAG0J,OAGjBI,GACC,cAACP,EAAD,CAAaL,QAASY,EAAkB,SAAW,QAASpN,MAAM,KAAK4K,QAjBrD,WACtB0B,EAASoB,YAA0B,CAAE9I,WAAYlB,EAAmB+J,MAAOT,MAgBvE,SACE,cAAC,IAAD,CAAW/M,MAAM,eAAeuC,MAAM,eClEnCwD,EAAYtH,YAAOmD,KAAPnD,CAAH,uGAGlB,qBAAG4B,MAAkBI,aAAaC,MAMhCgN,EAA0BjP,YAAOmD,KAAPnD,CAAH,gNAOzB,qBAAG4B,MAAkBI,aAAaE,MA+BvBgN,EArBiC,SAAC,GAAoB,IAC3D7H,GAD0D,EAAjBnB,YACf,CAAEmB,QAAS,KAArCA,QACAzC,EAAMC,cAAND,EAEF4J,EAAqBC,YAAyBpH,GAEpD,OACE,eAAC,EAAD,CAAWvC,eAAe,gBAAgBvC,cAAe,CAAC,SAAU,SAAU,OAA9E,UACE,cAAC,KAAD,CAAM4M,cAAc,YAAY5N,MAAM,aAAawI,SAAS,OAAOG,MAAI,EAAvE,SACGtF,EAAE,eAEL,cAACqK,EAAD,UACG,CAAC9G,IAAYC,IAAKD,IAAYG,OAAQH,IAAYI,OAAQJ,IAAYM,MAAMgE,KAAI,SAAC6B,GAChF,OAAO,cAAC,EAAD,CAAgCA,UAAWA,EAAWtJ,kBAAmBqC,GAApDiH,QAG9Bc,IAAQZ,EAAmBG,aAAgE,KAAjD,cAAC,EAAD,CAAgB3J,kBAAmBqC,Q,oBCiNtEgI,EA/NyC,SAAC,GAAoB,IAAlBnJ,EAAiB,EAAjBA,WACnD0H,EAAWC,cACA7I,GAAsBkB,GAAc,CAAEmB,QAAS,KAAxDA,QACFmH,EAAqBC,YAAyBzJ,GAC5CpD,EAAU0H,cAAV1H,MACAgD,EAAMC,cAAND,EACR,EAA4CK,mBAIzC,CACD8D,SAAU,GACVuG,YAAa,EACbC,QAAS,IAPX,mBAAOC,EAAP,KAAuBC,EAAvB,KASA,EAA8CxK,mBAAqB,IAAnE,mBAAOyK,EAAP,KAAwBC,EAAxB,KACA,EAAsC1K,mBAAqB,IAA3D,mBAAO2K,EAAP,KAAoBC,EAApB,KACA,EAAkC5K,oBAAS,GAA3C,mBAAO6K,EAAP,KAAkBC,EAAlB,KACA,EAA0C9K,oBAAS,GAAnD,mBAAO+K,EAAP,KAAsBC,EAAtB,KACA,EAAkChL,mBAAS,GAA3C,mBAAOiL,EAAP,KAAkBC,EAAlB,KACA,GAAiDC,cAAzCC,GAAR,GAAQA,YAA6BC,GAArC,GAAqBC,eACfvH,GAAewH,cACrB,GAAuB5I,eAAfC,GAAR,GAAQA,KAAMC,GAAd,GAAcA,KAER2I,GAA2BC,KAAKC,UAAUnC,GAuDhD,OArDApJ,qBAAU,WACR,IAAMwL,EAAuB,uCAAG,gCAAAvL,EAAA,sEAE5B0K,GAAa,GACPc,EAA2BH,KAAKI,MAAML,IAHhB,SAIKM,YAC/B/L,EAAkB2G,cAClBkF,EAvCY,KAiCc,OAItBG,EAJsB,OAStBjI,EAAWsD,YAAa2E,GAC9BvB,EAAkB,CAChB1G,WACAuG,YAAa,EACbC,QAAS0B,KAAKC,KAAKnI,EAASkE,OAhDjB,IAgD2C,IAExD8C,GAAa,GACbE,GAAiB,GAhBW,kDAkB5BkB,QAAQC,MAAM,sCAAd,MAlB4B,0DAAH,sDAsBxBpM,GAAqBqM,YAAUrM,IAA6C,KAAtBA,IACzD4L,MAED,CAAChD,EAAU5I,EAAmByL,GAA0BJ,KAE3DjL,qBAAU,WACR,IAAMkM,EAAwB,uCAAG,8BAAAjM,EAAA,6DACzBkM,EAAsBC,iBAC1B9B,EAAgBjD,KAAI,SAAC1D,GACnB,MAAO,CAAE8C,QAAS9C,EAAStF,IAAIoI,QAAS7G,kBAAmB+D,EAAStF,IAAIyC,WAAW6G,OAErF,WAL6B,SAOZ0E,YAAmCF,GAPvB,OAOzBG,EAPyB,OAQ/B7B,EAAe6B,GARgB,2CAAH,qDAW1BhC,EAAgBzC,OAAS,GAC3BqE,MAED,CAAC5B,IAEJtK,qBAAU,WACR,IAAMuM,EAAQnC,EAAezG,SAAS4I,MAhFrB,GAiFCnC,EAAeF,YAAc,GAjF9B,EAkFAE,EAAeF,aAEhCK,EAAmBgC,KAClB,CAACnC,IAGF,eAAC,IAAD,CAAKoC,GAAG,OAAR,UACE,cAACtK,EAAA,EAAD,CAAWuK,GAAI,CAAC,EAAG,KAAM,QAAzB,SACE,eAAC,KAAD,CACEC,MAAO,CAAEC,IAAK,OAAQC,QAAS,UAC/B7Q,WAAY,CAAC,KAAM,KAAM,UACzBoB,cAAe,CAAC,SAAU,SAAU,OAHtC,UAKE,cAAC,EAAD,CAAiB2D,WAAYA,IAC7B,cAAC,IAAD,CACE5E,MAAM,KACN2Q,SAAUnC,EACV5D,QAAS,WACPoE,MAJJ,SAOG1L,EAAE,kBAIT,cAAC0C,EAAA,EAAD,UACsC,IAAnCkI,EAAezG,SAASkE,QACF,IAAvB2C,EAAY3C,QACe,IAA3ByC,EAAgBzC,QACf6C,EAQC,qCACE,eAAC,KAAD,WACE,gCACE,+BACE,eAAC,KAAD,CAAI9F,UAAW,CAAC,SAAU,KAAM,QAAhC,cAA2CpF,EAAE,WAC7C,eAAC,KAAD,CAAIoF,UAAU,QAAd,cAAwBpF,EAAE,YACzBiD,IAAQC,GAAO,KACd,qCACE,eAAC,KAAD,CAAIkC,UAAU,QAAd,cAAwBpF,EAAE,YAC1B,eAAC,KAAD,CAAIoF,UAAU,SAAd,cAAyBpF,EAAE,WAC3B,eAAC,KAAD,CAAIoF,UAAU,SAAd,cAAyBpF,EAAE,YAG/B,eAAC,KAAD,CAAIoF,UAAU,SAAd,cAAyBpF,EAAE,WAC1BiD,IAAQC,GAAO,KAAO,cAAC,KAAD,SAI3B,gCACIkI,EAGAN,EAAgBjD,KAAI,SAAC1D,GACnB,IAAMmJ,EAAUtC,EAAY7D,MAAK,SAACoG,GAAD,OAAaA,EAAQtG,UAAY9C,EAAStF,IAAIoI,WAC/E,OACE,cAACf,EAAA,EAAD,CAEE/B,SAAUA,EACVtF,IAAKyO,EACLlJ,aAAcA,IAJhB,UACUD,EAASd,YADnB,YACkCc,EAAStF,IAAIoI,QAD/C,YAC0D9C,EAASkC,UADnE,YACgFlC,EAAS4B,QAN7F,cAAC5C,EAAA,EAAD,SAgBN,cAAC,KAAD,CACEqK,UAAS,cAASxQ,EAAMC,OAAOC,WAAtB,UACTyI,GAAG,OACHhI,cAAc,SACduC,eAAe,gBACff,OAAO,OALT,SAOE,eAAC,IAAD,WACE,cAAC,IAAD,CACEmI,QAAS,WAC4B,IAA/BsD,EAAeF,aACjBG,GAAkB,SAAC4C,GAAD,mBAAC,eACdA,GADa,IAEhB/C,YAAa+C,EAAU/C,YAAc,QAL7C,SAUE,cAAC,IAAD,CAAe/N,MAAsC,IAA/BiO,EAAeF,YAAoB,eAAiB,cAE5E,cAAC,KAAD,UACG1K,EAAE,2BAA4B,CAC7B0N,KAAM9C,EAAeF,YACrBC,QAASC,EAAeD,YAG5B,cAAC,IAAD,CACErD,QAAO,sBAAE,gCAAA7G,EAAA,yDACHmK,EAAeF,cAAgBE,EAAeD,QAD3C,oBAELE,GAAkB,SAAC4C,GAAD,mBAAC,eACdA,GADa,IAEhB/C,YAAa+C,EAAU/C,YAAc,OAIrCE,EAAeD,QAAUC,EAAeF,cAAgB,GACxDE,EAAezG,SAASkE,SA7L1B,IA6LqDiD,EAThD,iCAYDH,GAAa,GACPc,EAA2BH,KAAKI,MAAML,IAb3C,SAcgCM,YAC/B/L,EAAkB2G,cAClBkF,EApMN,KAqMuBX,EAAY,IAjB9B,OAcKc,EAdL,OAmBKjI,EAAWsD,YAAa2E,GAC9BvB,GAAkB,SAAC4C,GACjB,OAAO,2BACFA,GADL,IAEEtJ,WACAwG,QAAS0B,KAAKC,KAAKnI,EAASkE,OA9MrC,IA8M+D,OAG1D8C,GAAa,GACbI,GAAa,SAACkC,GAAD,OAAeA,EAAY,KA5BvC,kDA8BDlB,QAAQC,MAAM,sCAAd,MA9BC,0DADX,SAqCE,cAAC,IAAD,CACE7P,MAAOiO,EAAeF,cAAgBE,EAAeD,QAAU,eAAiB,sBA3G1F,eAAC,KAAD,CAAMpF,EAAE,OAAO5H,cAAc,SAASpB,WAAW,SAAjD,UACE,cAACM,EAAA,EAAD,IACA,cAAC,KAAD,CAAM8I,GAAG,MAAML,MAAI,EAAnB,SACGtF,EAAE,0CC/HF2N,UAZE,WACf,IAAQvN,EAAsBmB,cAAtBnB,kBACFkB,EAAasM,YAAiBxN,GAEpC,OACE,qCACE,cAACiB,EAAA,EAAD,CAAQC,WAAYA,IACpB,cAAC,EAAD,CAAiBA,WAAYA,S,8ICJtBuM,EAA0C,SAAC,GAAD,IAAG1R,EAAH,EAAGA,MAAOiF,EAAV,EAAUA,KAASzF,EAAnB,wBACrD,eAAC,IAAD,2BAASA,GAAT,cACE,cAAC,KAAD,CAAMwJ,SAAS,OAAOxI,MAAM,aAAayI,UAAU,SAAnD,SACGjJ,IAEO,OAATiF,EACC,cAAC,KAAD,CAAUjC,OAAO,OAAOD,MAAM,MAAM4O,GAAG,SAEvC,cAAC,KAAD,CAAMC,WAAW,MAAM3I,UAAU,SAAjC,SACGhE,SAMHF,EAAU9F,YAAOmD,KAAPnD,CAAH,4LAEG,qBAAG4B,MAAkBC,OAAO+Q,oBACtB,qBAAGhR,MAAkBC,OAAOC,cAC/B,qBAAGF,MAAkBgH,MAAMiK,QAM/B/M,O,yCC3BVgN,E,0JAAAA,O,yBAAAA,I,iBAAAA,I,0BAAAA,M,KAWL,IAAMC,EAAU/S,IAAOC,IAAV,wXAEG,qBAAG2B,MAAkBC,OAAOmR,SACtB,qBAAGpR,MAAkBC,OAAOoR,kBAC3B,qBAAGrR,MAAkBgH,MAAMC,WAAW,qBAAGjH,MAAkBgH,MAAMC,WAYpF,qBAAGqK,QACG,yEAQJC,EAAcnT,YAAOoT,KAAPpT,CAAH,mJAQXqT,EAAe,CACnBC,YAAY,EACZC,YAAaT,EAAaU,UAC1B7S,MAAO,IAGH8S,EAA6B,kBAAMC,QAAQC,SAAQ,IA4E1CC,IA1E+C,SAAC,GAIxD,IAAD,IAHJC,sBAGI,MAHaJ,EAGb,EAFJ/S,EAEI,EAFJA,eACGH,EACC,iBACJ,EAA0B0E,mBAASoO,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACQnP,EAAMC,cAAND,EACA0O,EAAmCQ,EAAnCR,WAAYC,EAAuBO,EAAvBP,YAAa5S,EAAUmT,EAAVnT,MAyCjC,OAzBAyE,qBAAU,YACoC,IAArBiM,YAAU1Q,GAER,uCAAG,4BAAA0E,EAAA,sEAExB0O,GAAS,SAAC1B,GAAD,mBAAC,eAAoBA,GAArB,IAAgCiB,YAAY,OAF7B,SAGCO,EAAelT,GAHhB,OAGlBqT,EAHkB,OAKxBD,GAAS,SAAC1B,GAAD,mBAAC,eACLA,GADI,IAEPiB,YAAY,EACZC,YAAaS,EAAalB,EAAamB,MAAQnB,EAAaoB,eARtC,gDAWxBH,GAAS,SAAC1B,GAAD,mBAAC,eAAoBA,GAArB,IAAgCiB,YAAY,OAX7B,yDAAH,oDAgBvBa,GAEAJ,GAAS,SAAC1B,GAAD,mBAAC,eAAoBA,GAArB,IAAgCkB,YAAaT,EAAaU,iBAEpE,CAAC7S,EAAOkT,EAAgBE,IAGzB,eAAC,IAAD,yBAAKvR,SAAS,YAAejC,GAA7B,cACE,cAAC,KAAD,CACE6T,YAAaxP,EAAE,mBAAoB,CAAEyP,QAASzP,EAAE,WAAW+G,gBAC3DhL,MAAOmT,EAAMnT,MACb2T,SA5Ce,SAACC,GACpB,IAAeC,EAAaD,EAAIE,OAAxB9T,MACRoT,GAAS,SAAC1B,GAAD,mBAAC,eACLA,GADI,IAEP1R,MAAO6T,QAyCL1C,MAAO,CAAEtP,SAAU,WAAYkS,OAAQ,GAAIC,aAAc,UAE1DrB,GACC,cAAC,IAAD,CAAK9Q,SAAS,WAAWoS,IAAI,OAAOC,MAAM,OAAO/C,MAAO,CAAE4C,OAAQ,IAAlE,SACE,cAAC,IAAD,MAGJ,cAAC3B,EAAD,CAASG,OAAQK,IAAgBT,EAAaU,UAA9C,SACGD,IAAgBT,EAAamB,MAC5B,cAACd,EAAD,CAAajH,QA9CD,WAClB6H,EAASV,GACT3S,EAAeoT,EAAMnT,QA4Cf,SAAoCmT,EAAMnT,QAE1C,cAAC,KAAD,CAAMkR,GAAG,OAAOc,WAAW,OAA3B,SACG/N,EAAE,+B,4ECjHAoC,IARqC,SAACzG,GACnD,IACMuU,EADYxL,cAAV1H,MACiBmT,OACrB,uDACA,uDACJ,OAAO,cAAC,IAAD,aAAYD,WAAYA,GAAgBvU","file":"static/js/9.f31f7fd1.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst SearchBar: React.FC = (props) => {\n  const history = useHistory()\n\n  const handleAddressClick = (value: string) => {\n    history.push(`${nftsBaseUrl}/profile/${value}`)\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\n}\n\nexport default SearchBar\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { ProfileAvatarFetchStatus } from 'state/types'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\n            <Skeleton />\n          ) : (\n            <Text lineHeight=\"1.25\">{profileName}</Text>\n          )}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import React from 'react'\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport SearchBar from '../components/SearchBar'\n\nconst BackLink = styled(RouterLink)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: inline-flex;\n  font-weight: 600;\n`\n\nconst TopBar: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n      <BackLink to={`${nftsBaseUrl}/collections`}>\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\n        {t('All Collections')}\n      </BackLink>\n      <Box>\n        <SearchBar />\n      </Box>\n    </Flex>\n  )\n}\n\nexport default TopBar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\n\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\n  collectionAddress: string\n}\n\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\n      setLowestPrice(lowestCollectionPrice)\n    }\n\n    fetchLowestPrice()\n  }, [collectionAddress, setLowestPrice])\n\n  const formattedLowestPrice =\n    lowestPrice === null\n      ? null\n      : lowestPrice.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })\n\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\n}\n\nexport default LowestPriceStatBoxItem\n","import React from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Text } from '@pancakeswap/uikit'\nimport { Collection } from 'state/nftMarket/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport MarketPageTitle from '../components/MarketPageTitle'\nimport StatBox, { StatBoxItem } from '../components/StatBox'\nimport BannerHeader from '../components/BannerHeader'\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\nimport BaseSubMenu from '../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../constants'\nimport TopBar from './TopBar'\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\n\ninterface HeaderProps {\n  collection: Collection\n}\n\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\n  const { t } = useTranslation()\n  const { pathname, hash } = useLocation()\n\n  const volume = totalVolumeBNB\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })\n    : '0'\n\n  const itemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\n    },\n    {\n      label: t('Traits'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\n    },\n  ]\n\n  return (\n    <>\n      <MarketPageHeader>\n        <TopBar />\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\n        <MarketPageTitle\n          title={collection.name}\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\n        >\n          <StatBox>\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\n            <StatBoxItem\n              title={t('Items listed')}\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\n            />\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\n          </StatBox>\n        </MarketPageTitle>\n      </MarketPageHeader>\n      <Container>\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\n      </Container>\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n              <RoundedImage\n                src={nft?.image.thumbnail}\n                alt={nft?.name}\n                width={64}\n                height={64}\n                mr={[0, null, '16px']}\n                mb={['8px', null, 0]}\n              />\n              <Flex flexDirection=\"column\">\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n                  {nft?.collectionName}\n                </Text>\n                <Text textAlign={['center', null, 'left']} bold>\n                  {nft?.name}\n                </Text>\n              </Flex>\n            </Flex>\n          </RouterLink>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortActivity = ({\n  askOrders = [],\n  transactions = [],\n}: {\n  askOrders?: AskOrder[]\n  transactions?: Transaction[]\n}): Activity[] => {\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\n      const marketEvent = MarketEvent.SELL\n      const { timestamp, nft } = transactionHistory\n      const price = transactionHistory.askPrice\n      const tx = transactionHistory.id\n      const buyer = transactionHistory.buyer.id\n      const seller = transactionHistory.seller.id\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\n      const price = askOrderHistory.askPrice\n      const { timestamp, nft } = askOrderHistory\n      const tx = askOrderHistory.id\n      const seller = askOrderHistory?.seller.id\n      return { marketEvent, price, timestamp, nft, tx, seller }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\n\ninterface ClearAllButtonProps extends ButtonProps {\n  collectionAddress: string\n}\n\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const clearAll = () => {\n    dispatch(removeAllActivityFilters(collectionAddress))\n  }\n\n  return (\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\n      {t('Clear')}\n    </Button>\n  )\n}\n\nexport default ClearAllButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../state/nftMarket/types'\n\ninterface ActivityFilterProps {\n  eventType: MarketEvent\n  collectionAddress: string\n}\n\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\n  ${({ hasItem }) =>\n    hasItem &&\n    `  \n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 8px;\n  `}\n`\n\nconst CloseButton = styled(IconButton)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`\n\nconst eventName = (t: ContextApi['t'], eventType: string) => {\n  switch (eventType) {\n    case MarketEvent.CANCEL:\n      return t('Delisted')\n    case MarketEvent.MODIFY:\n      return t('Modified')\n    case MarketEvent.NEW:\n      return t('Listed')\n    case MarketEvent.SELL:\n      return t('Sold')\n    default:\n      return ''\n  }\n}\n\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\n\n  const handleMenuClick = () => {\n    if (!isEventSelected) {\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n    }\n  }\n\n  const handleClearItem = () => {\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n  }\n\n  return (\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\n      <Box>\n        <TriggerButton\n          onClick={handleMenuClick}\n          variant={isEventSelected ? 'subtle' : 'light'}\n          scale=\"sm\"\n          hasItem={isEventSelected}\n        >\n          {eventName(t, eventType)}\n        </TriggerButton>\n      </Box>\n      {isEventSelected && (\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\n        </CloseButton>\n      )}\n    </Flex>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport ClearAllButton from './ClearAllButton'\nimport { ActivityFilter } from './ActivityFilter'\n\nexport const Container = styled(Flex)`\n  gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-items: center;\n    flex-grow: 2;\n  }\n`\n\nconst ScrollableFlexContainer = styled(Flex)`\n  align-items: center;\n  flex: 1;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-wrap: wrap;\n    overflow-x: revert;\n  }\n`\n\ninterface FiltersProps {\n  collection: Collection\n}\n\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\n  const { address } = collection || { address: '' }\n  const { t } = useTranslation()\n\n  const nftActivityFilters = useGetNftActivityFilters(address)\n\n  return (\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\n        {t('Filter by')}\n      </Text>\n      <ScrollableFlexContainer>\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\n        })}\n      </ScrollableFlexContainer>\n      {!isEmpty(nftActivityFilters.typeFilters) ? <ClearAllButton collectionAddress={address} /> : null}\n    </Container>\n  )\n}\n\nexport default ActivityFilters\n","import React, { useEffect, useState } from 'react'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Flex,\n  Table,\n  Text,\n  Th,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { getCollectionActivity, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport Container from 'components/Layout/Container'\nimport TableLoader from 'components/TableLoader'\nimport { Activity, Collection, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityRow from '../components/Activity/ActivityRow'\nimport { sortActivity } from './utils/sortActivity'\n\nconst MAX_PER_PAGE = 8\n\nconst MAX_PER_QUERY = 100\n\ninterface ActivityHistoryProps {\n  collection?: Collection\n}\n\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\n  const dispatch = useAppDispatch()\n  const { address: collectionAddress } = collection || { address: '' }\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [paginationData, setPaginationData] = useState<{\n    activity: Activity[]\n    currentPage: number\n    maxPage: number\n  }>({\n    activity: [],\n    currentPage: 1,\n    maxPage: 1,\n  })\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [queryPage, setQueryPage] = useState(1)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\n\n  useEffect(() => {\n    const fetchCollectionActivity = async () => {\n      try {\n        setIsLoading(true)\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n        const collectionActivity = await getCollectionActivity(\n          collectionAddress.toLowerCase(),\n          nftActivityFiltersParsed,\n          MAX_PER_QUERY,\n        )\n        const activity = sortActivity(collectionActivity)\n        setPaginationData({\n          activity,\n          currentPage: 1,\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n        })\n        setIsLoading(false)\n        setIsInitialized(true)\n      } catch (error) {\n        console.error('Failed to fetch collection activity', error)\n      }\n    }\n\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\n      fetchCollectionActivity()\n    }\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        activitiesSlice.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    if (activitiesSlice.length > 0) {\n      fetchActivityNftMetadata()\n    }\n  }, [activitiesSlice])\n\n  useEffect(() => {\n    const slice = paginationData.activity.slice(\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\n      MAX_PER_PAGE * paginationData.currentPage,\n    )\n    setActivitiesSlice(slice)\n  }, [paginationData])\n\n  return (\n    <Box py=\"32px\">\n      <Container px={[0, null, '24px']}>\n        <Flex\n          style={{ gap: '16px', padding: '0 16px' }}\n          alignItems={[null, null, 'center']}\n          flexDirection={['column', 'column', 'row']}\n        >\n          <ActivityFilters collection={collection} />\n          <Button\n            scale=\"sm\"\n            disabled={isLoading}\n            onClick={() => {\n              refresh()\n            }}\n          >\n            {t('Refresh')}\n          </Button>\n        </Flex>\n      </Container>\n      <Container>\n        {paginationData.activity.length === 0 &&\n        nftMetadata.length === 0 &&\n        activitiesSlice.length === 0 &&\n        !isLoading ? (\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text pt=\"8px\" bold>\n              {t('No NFT market history found')}\n            </Text>\n          </Flex>\n        ) : (\n          <>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\n                  {isXs || isSm ? null : (\n                    <>\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\n                      <Th textAlign=\"center\"> {t('From')}</Th>\n                      <Th textAlign=\"center\"> {t('To')}</Th>\n                    </>\n                  )}\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\n                  {isXs || isSm ? null : <Th />}\n                </tr>\n              </thead>\n\n              <tbody>\n                {!isInitialized ? (\n                  <TableLoader />\n                ) : (\n                  activitiesSlice.map((activity) => {\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                    return (\n                      <ActivityRow\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\n                        activity={activity}\n                        nft={nftMeta}\n                        bnbBusdPrice={bnbBusdPrice}\n                      />\n                    )\n                  })\n                )}\n              </tbody>\n            </Table>\n            <Flex\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\n              pt=\"24px\"\n              flexDirection=\"column\"\n              justifyContent=\"space-between\"\n              height=\"100%\"\n            >\n              <PageButtons>\n                <Arrow\n                  onClick={() => {\n                    if (paginationData.currentPage !== 1) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage - 1,\n                      }))\n                    }\n                  }}\n                >\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\n                </Arrow>\n                <Text>\n                  {t('Page %page% of %maxPage%', {\n                    page: paginationData.currentPage,\n                    maxPage: paginationData.maxPage,\n                  })}\n                </Text>\n                <Arrow\n                  onClick={async () => {\n                    if (paginationData.currentPage !== paginationData.maxPage) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage + 1,\n                      }))\n\n                      if (\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\n                      ) {\n                        try {\n                          setIsLoading(true)\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n                          const collectionActivity = await getCollectionActivity(\n                            collectionAddress.toLowerCase(),\n                            nftActivityFiltersParsed,\n                            MAX_PER_QUERY * (queryPage + 1),\n                          )\n                          const activity = sortActivity(collectionActivity)\n                          setPaginationData((prevState) => {\n                            return {\n                              ...prevState,\n                              activity,\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n                            }\n                          })\n                          setIsLoading(false)\n                          setQueryPage((prevState) => prevState + 1)\n                        } catch (error) {\n                          console.error('Failed to fetch collection activity', error)\n                        }\n                      }\n                    }\n                  }}\n                >\n                  <ArrowForwardIcon\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\n                  />\n                </Arrow>\n              </PageButtons>\n            </Flex>\n          </>\n        )}\n      </Container>\n    </Box>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useParams } from 'react-router'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport Header from '../Header'\nimport ActivityHistory from '../../ActivityHistory/ActivityHistory'\n\nconst Activity = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const collection = useGetCollection(collectionAddress)\n\n  return (\n    <>\n      <Header collection={collection} />\n      <ActivityHistory collection={collection} />\n    </>\n  )\n}\n\nexport default Activity\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n"],"sourceRoot":""}